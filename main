// Source code is decompiled from a .class file using FernFlower decompiler.
import java.util.LinkedList;
import java.util.Scanner;

public class main {
   public main() {
   }

   public static void main(String[] args) {
      System.out.println("Welcome to UrbanMatchExplorer. The goal of this application\nis to be a one stop shop for identifying ideal houses and trip locations in\nthe neighborhood which best match your preferences. To begin, choose one\nof the following 5 cities to explore\n1. Philadelphia\n2. NYC\n3. Chicago\n4. Los Angeles\n5. Washington D.C");
      System.out.println("Enter just a number (1-5) of the city you'd like to explore:");
      Scanner scanner = new Scanner(System.in);
      int city = scanner.nextInt();
      System.out.println("Ah, nice choice!");
      String var10000;
      switch (city) {
         case 2:
            var10000 = "https://www.redfin.com/city/30749/NY/New-York";
            break;
         case 3:
            var10000 = "https://www.redfin.com/city/29470/IL/Chicago";
            break;
         case 4:
            var10000 = "https://www.redfin.com/city/11203/CA/Los-Angeles";
            break;
         case 5:
            var10000 = "https://www.redfin.com/city/12839/DC/Washington-DC";
            break;
         default:
            var10000 = "https://www.redfin.com/city/15502/PA/Philadelphia";
      }

      String baseUrl = var10000;
      realtorsParser z = new realtorsParser(baseUrl);
      LinkedList<house> Redfinhouses = z.collectAllHouses();
      System.out.println("For reference here are the summary statistics of the city you chose");
      realtorsParser.calculateStatistics(Redfinhouses);
      System.out.println("\nThere are now a couple of options to explore\nWould you like to identify a specific house which most closely\nmatches your budget and needs or would you instead like to\ngive a couple of characteristics of your ideal neighborhood\nin the region you identified above and we'll tell you which\nneighborhood most closely matches your preferences:\n");
      boolean stay = true;

      while(stay) {
         System.out.println("1. Identify your one ideal house\n2. Explore neighborhoods which match your preferences\n3. Exit");
         new Scanner(System.in);
         System.out.println("Pick a number (1-3)");
         int op = scanner.nextInt();
         switch (op) {
            case 1:
               z.closestHouseMatch();
               break;
            case 2:
               homesParser.compareToCities();
               break;
            default:
               stay = false;
         }
      }

      z.printOutAll();
   }
}
